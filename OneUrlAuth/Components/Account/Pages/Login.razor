@page "/Account/Login"
@layout LoginLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.FluentUI.AspNetCore.Components
@using OneUrlAuth.Components.Layout
@using OneUrlAuth.Data
@inject IMessageService MessageService

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<FluentStack Orientation="Orientation.Horizontal">
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" style="width: 100%;">
        <FluentStack Orientation="Orientation.Vertical">
            <DataAnnotationsValidator />
            <FluentValidationSummary />

            <FluentTextField Name="Input.Email" @bind-Value=Input.Email Label="Username" Placeholder="user@example.com" TextFieldType="TextFieldType.Email" Spellcheck="true" style="width: 100%;" />
            <FluentValidationMessage For="@(() => Input.Email)" />

            <FluentTextField Name="Input.Password" @bind-Value=Input.Password Label="Password" Placeholder="Password" TextFieldType="TextFieldType.Password" style="width: 100%;" />
            <FluentValidationMessage For="@(() => Input.Password)" />

            <FluentCheckbox @bind-Value=Input.RememberMe>Remember me</FluentCheckbox>
            
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Log in</FluentButton>
            <div>
                <p>
                    <a href="Account/ForgotPassword">Forgot your password?</a>
                </p>
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                </p>
                <p>
                    <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                </p>
            </div>
        </FluentStack>
    </EditForm>

    @if (enableExternalLogin)
    {
        <FluentStack Orientation="Orientation.Vertical" Style="width: 100%">
            <h3>Login with other service</h3>
            <ExternalLoginPicker />
        </FluentStack>
    }
</FluentStack>

@code {
    private string? errorMessage;
    private bool enableExternalLogin = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    async Task ShowErrorMessage()
    {
        var type = MessageIntent.Error;

        await MessageService.ShowMessageBarAsync(errorMessage?? "", type);
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
            await ShowErrorMessage();
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
