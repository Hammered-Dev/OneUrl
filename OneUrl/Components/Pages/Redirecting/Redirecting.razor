@page "/rd/{target}"
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Authorization
@using OneUrl.Components.Layout
@using OneUrl.Models
@rendermode InteractiveServer
@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JSRuntime

<PageTitle>Redirecting...</PageTitle>

<div class="window">
    <div>
        Redirecting to @link
    </div>
    <div class="loading">
        
    </div>
</div>

@code {
    [Parameter]
    public string? Target {get; set;}

    private UrlRecord? link;
    private SettingsModel? settings;
    private Exception? error;

    private async void Navigate() 
    {
        try
        {
            var client = ClientFactory.CreateClient("AnonymousClient");
            link = await client.GetFromJsonAsync<UrlRecord>($"/redirect?id={Target}");
            settings = await client.GetFromJsonAsync<SettingsModel>("/settings");
            if (link is null || link.Location is null || settings is null) 
            {
                NavBack();
                return;
            };
            await Task.Delay(settings.RedirectDelay);
            NavigationManager.NavigateTo(link.Location);
        }
        catch (Exception? e)
        {
            error = e;
        }
    }

    private async void NavBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    protected override void OnInitialized()
    {
        Navigate();
        base.OnInitialized();
    }
}