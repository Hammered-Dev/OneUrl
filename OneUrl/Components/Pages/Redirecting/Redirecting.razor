@page "/rd/{target}"
@using OneUrl.Components.Layout
@rendermode InteractiveServer
@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JSRuntime

<PageTitle>Redirecting...</PageTitle>

<div class="window">
    <Image Src="images/brand.svg" Alt="Brand"/>
    <div>
        Redirecting to @link
    </div>
    <div class="loading">
        <Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Primary"/>
    </div>
</div>

@code {
    [Parameter]
    public string? Target {get; set;}

    private Link? link;
    private Exception? error;
    private string? baseUri = System.Environment.GetEnvironmentVariable("API_URL");

    private class Link
    {
        public string? target {get; set;}
        public string? location {get; set;}
    }

    private async void Navigate() {
        try
        {
            var client = ClientFactory.CreateClient();
            link = await client.GetFromJsonAsync<Link>($"{baseUri}/redirect/{Target}");
            await Task.Delay(3000);
            if (link is null || link.location is null) return;
            NavigationManager.NavigateTo(link.location);
        }
        catch (Exception? e)
        {
            error = e;
        }
    }

    private async void NavFoward()
    {
        var client = ClientFactory.CreateClient();
        link = await client.GetFromJsonAsync<Link>($"{baseUri}/rd/{Target}");
        if (link is null || link.location is null) return;
        NavigationManager.NavigateTo(link.location);
    }

    private async void NavBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    protected override void OnInitialized()
    {
        Navigate();
        base.OnInitialized();
    }
}