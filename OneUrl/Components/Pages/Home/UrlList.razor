@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@using System.Text.Json
@using Blazicons
@using Microsoft.FluentUI.AspNetCore.Components
@using OneUrl.Models
@using System.Diagnostics

<FluentDataGrid Items="@records.AsQueryable()"
    TGridItem="UrlRecord" 
    Pagination="@paginationState" 
    OnCellClick="onCellClicked">
    <PropertyColumn Property="@(p => p.Target)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Location)" Sortable="true" />
</FluentDataGrid>

@code {
    private UrlRecord[] records = [];
    PaginationState paginationState = new PaginationState { ItemsPerPage = 10 };
    private string? baseUri = System.Environment.GetEnvironmentVariable("API_URL");

    private async Task<UrlRecord[]> fetchData()
    {
        try
        {
            var client = ClientFactory.CreateClient("DefaultClient");
            var option = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            var data = await client.GetFromJsonAsync<UrlRecord[]>($"{baseUri}/manage/urls");
            if (data == null)
            {
                return [];
            }
            return data;
        }
        catch
        {
            return [];
        }
    }

    private async Task deleteData(string? id)
    {
        var client = ClientFactory.CreateClient();
        await client.DeleteAsync($"{baseUri}/manage/urls/{id}");
    }

    private async Task onCellClicked(FluentDataGridCell<UrlRecord> cell)
    {
        Debug.WriteLine(cell.ChildContent!.Target);
    }

    private void Navigate(string? id)
    {
        NavigationManager.NavigateTo($"/rd/{id}");
    }

    protected override async Task OnInitializedAsync()
    {
        records = await fetchData();
    }
}