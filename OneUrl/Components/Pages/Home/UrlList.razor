@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@using System.Text.Json
@using Blazicons
@using Microsoft.FluentUI.AspNetCore.Components

<FluentDataGrid Items="@records.AsQueryable()" Pagination="@paginationState">
    <PropertyColumn Property="@(p => p.Target)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Location)" Sortable="true" />
</FluentDataGrid>

@code {
    private Record[] records = [];
    PaginationState paginationState = new PaginationState {ItemsPerPage = 10};
    private string? baseUri = System.Environment.GetEnvironmentVariable("API_URL");
    private class Record
    {
        public string? Target {get; set;}
        public string? Location {get; set;}
    }

    private async Task<Record[]> fetchData()
    {
        try
        {
            var client = ClientFactory.CreateClient("DefaultClient");
            var option = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            var data = await client.GetFromJsonAsync<Record[]>($"{baseUri}/manage/urls");
            if (data == null)
            {
                return [];
            }
            return data;
        }
        catch
        {
            return [];
        }
    }

    private async Task deleteData(string? id)
    {
        var client = ClientFactory.CreateClient();
        await client.DeleteAsync($"{baseUri}/manage/urls/{id}");
    }

    private void Navigate(string? id)
    {
        NavigationManager.NavigateTo($"/rd/{id}");
    }

    protected override async Task OnInitializedAsync()
    {
        records = await fetchData();
    }
}